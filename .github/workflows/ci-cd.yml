name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Job 1: Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Verify Node and npm versions
      run: |
        node --version
        npm --version
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: Fetch latest schemas
      run: |
        npm run schemas:fetch
        echo "CFN_SPEC_PATH=${{ github.workspace }}/schemas/cfn-spec.json" >> $GITHUB_ENV
        echo "AZURE_PIPELINES_SCHEMA_PATH=${{ github.workspace }}/schemas/azure-pipelines.json" >> $GITHUB_ENV
      
    - name: Run ESLint
      run: npm run lint
      continue-on-error: false
      
    - name: Run TypeScript check for app
      run: npm run type-check
      continue-on-error: false
      
    - name: Run TypeScript check for tests
      run: npm run type-check:test
      continue-on-error: false
      
    - name: Run tests
      run: npm run test:run
      env:
        NODE_ENV: test
        CI: true
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 1

  # Job 2: Security and Quality Checks
  security-checks:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate || true
      
    - name: Check for outdated packages
      run: npm outdated || true

  # Job 3: Deploy to GitHub Pages (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-checks]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --prefer-offline --no-audit
      
    - name: Build for production
      run: npm run build
      env:
        NODE_ENV: production
        GITHUB_PAGES: true
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Job 4: Playwright E2E (runs after build-and-test and security-checks)
  e2e:
    name: Playwright E2E
    needs: [build-and-test, security-checks]
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build app
      run: npm run build

    - name: Install Playwright browsers and deps
      run: npx playwright install --with-deps

    - name: Start server (Unix)
      if: runner.os != 'Windows'
      run: |
        export SERVE_STATIC=1
        export PORT=8787
        export NODE_ENV=test
        nohup node node_modules/tsx/dist/cli.mjs src/server.ts > server.log 2>&1 &

    - name: Start server (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $env:SERVE_STATIC='1'
        $env:PORT='8787'
        $env:NODE_ENV='test'
        Start-Process -FilePath node -ArgumentList "node_modules/tsx/dist/cli.mjs","src/server.ts" -NoNewWindow -RedirectStandardOutput "server.out.log" -RedirectStandardError "server.err.log"

    - name: Wait for server
      run: npx wait-on -t 180000 http://localhost:8787/health

    - name: Print server logs on failure
      if: failure()
      shell: bash
      run: |
        echo '--- server.log ---' && (test -f server.log && sed -n '1,200p' server.log || echo 'server.log not found')
        echo '--- server.out.log ---' && (test -f server.out.log && sed -n '1,200p' server.out.log || echo 'server.out.log not found')
        echo '--- server.err.log ---' && (test -f server.err.log && sed -n '1,200p' server.err.log || echo 'server.err.log not found')

    - name: Run Playwright E2E
      env:
        CI: 'true'
      run: npm run e2e
