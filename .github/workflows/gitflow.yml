name: Gitflow Automation

on:
  push:
    branches: [ 'release/**', 'hotfix/**' ]
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

jobs:
  # Validate branch naming conventions
  validate-branch:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Validate branch name
      run: |
        BRANCH_NAME="${{ github.head_ref }}"
        echo "Validating branch name: $BRANCH_NAME"
        
        if [[ $BRANCH_NAME =~ ^(feature|bug|release|hotfix)\/[A-Z]+-[0-9]+\/[a-z0-9-]+$ ]] || 
           [[ $BRANCH_NAME =~ ^(feature|bug)\/[a-z0-9-]+$ ]] ||
           [[ $BRANCH_NAME =~ ^(release)\/v[0-9]+\.[0-9]+\.[0-9]+$ ]] ||
           [[ $BRANCH_NAME =~ ^(hotfix)\/[A-Z]+-[0-9]+\/[a-z0-9-]+$ ]]; then
          echo "✅ Branch name follows Gitflow conventions"
        else
          echo "❌ Branch name does not follow Gitflow conventions"
          echo "Expected patterns:"
          echo "  - feature/TICKET-123/description or feature/description"
          echo "  - bug/TICKET-123/description or bug/description"
          echo "  - release/v1.2.3"
          echo "  - hotfix/TICKET-123/description"
          exit 1
        fi

  # Auto-merge develop to main for releases
  auto-merge-release:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/heads/release/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Create release PR
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        VERSION=${BRANCH_NAME#release/}
        
        # Create PR from release branch to main
        gh pr create \
          --title "Release $VERSION" \
          --body "Automated release PR for $VERSION" \
          --base main \
          --head $BRANCH_NAME \
          || echo "PR already exists"

  # Sync main back to develop after releases/hotfixes
  sync-branches:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Sync main to develop
      run: |
        git fetch origin
        git checkout develop
        git merge origin/main --no-ff -m "Sync main changes to develop [skip ci]"
        git push origin develop